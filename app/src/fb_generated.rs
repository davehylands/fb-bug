// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum SubRootProto1Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SubRootProto1<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SubRootProto1<'a> {
    type Inner = SubRootProto1<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> SubRootProto1<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SubRootProto1 { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SubRootProto1Args) -> flatbuffers::WIPOffset<SubRootProto1<'bldr>> {
      let mut builder = SubRootProto1Builder::new(_fbb);
      builder.add_sub_field1(args.sub_field1);
      builder.finish()
    }

    pub const VT_SUB_FIELD1: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn sub_field1(&self) -> i32 {
    self._tab.get::<i32>(SubRootProto1::VT_SUB_FIELD1, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for SubRootProto1<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>(&"sub_field1", Self::VT_SUB_FIELD1, false)?
     .finish();
    Ok(())
  }
}
pub struct SubRootProto1Args {
    pub sub_field1: i32,
}
impl<'a> Default for SubRootProto1Args {
    #[inline]
    fn default() -> Self {
        SubRootProto1Args {
            sub_field1: 0,
        }
    }
}
pub struct SubRootProto1Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SubRootProto1Builder<'a, 'b> {
  #[inline]
  pub fn add_sub_field1(&mut self, sub_field1: i32) {
    self.fbb_.push_slot::<i32>(SubRootProto1::VT_SUB_FIELD1, sub_field1, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SubRootProto1Builder<'a, 'b> {
    let start = _fbb.start_table();
    SubRootProto1Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SubRootProto1<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for SubRootProto1<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("SubRootProto1");
      ds.field("sub_field1", &self.sub_field1());
      ds.finish()
  }
}
pub enum SubRootProto2Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SubRootProto2<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SubRootProto2<'a> {
    type Inner = SubRootProto2<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> SubRootProto2<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SubRootProto2 { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SubRootProto2Args) -> flatbuffers::WIPOffset<SubRootProto2<'bldr>> {
      let mut builder = SubRootProto2Builder::new(_fbb);
      builder.add_timestamp(args.timestamp);
      builder.add_sub_field1(args.sub_field1);
      builder.finish()
    }

    pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 4;
    pub const VT_SUB_FIELD1: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn timestamp(&self) -> i64 {
    self._tab.get::<i64>(SubRootProto2::VT_TIMESTAMP, Some(0)).unwrap()
  }
  #[inline]
  pub fn sub_field1(&self) -> i32 {
    self._tab.get::<i32>(SubRootProto2::VT_SUB_FIELD1, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for SubRootProto2<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>(&"timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<i32>(&"sub_field1", Self::VT_SUB_FIELD1, false)?
     .finish();
    Ok(())
  }
}
pub struct SubRootProto2Args {
    pub timestamp: i64,
    pub sub_field1: i32,
}
impl<'a> Default for SubRootProto2Args {
    #[inline]
    fn default() -> Self {
        SubRootProto2Args {
            timestamp: 0,
            sub_field1: 0,
        }
    }
}
pub struct SubRootProto2Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SubRootProto2Builder<'a, 'b> {
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: i64) {
    self.fbb_.push_slot::<i64>(SubRootProto2::VT_TIMESTAMP, timestamp, 0);
  }
  #[inline]
  pub fn add_sub_field1(&mut self, sub_field1: i32) {
    self.fbb_.push_slot::<i32>(SubRootProto2::VT_SUB_FIELD1, sub_field1, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SubRootProto2Builder<'a, 'b> {
    let start = _fbb.start_table();
    SubRootProto2Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SubRootProto2<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for SubRootProto2<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("SubRootProto2");
      ds.field("timestamp", &self.timestamp());
      ds.field("sub_field1", &self.sub_field1());
      ds.finish()
  }
}
pub enum RootProtoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct RootProto<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RootProto<'a> {
    type Inner = RootProto<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> RootProto<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        RootProto { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args RootProtoArgs<'args>) -> flatbuffers::WIPOffset<RootProto<'bldr>> {
      let mut builder = RootProtoBuilder::new(_fbb);
      builder.add_field3(args.field3);
      if let Some(x) = args.sub_root2 { builder.add_sub_root2(x); }
      if let Some(x) = args.sub_root1 { builder.add_sub_root1(x); }
      if let Some(x) = args.field2 { builder.add_field2(x); }
      if let Some(x) = args.field1 { builder.add_field1(x); }
      builder.finish()
    }

    pub const VT_FIELD1: flatbuffers::VOffsetT = 4;
    pub const VT_FIELD2: flatbuffers::VOffsetT = 6;
    pub const VT_SUB_ROOT1: flatbuffers::VOffsetT = 8;
    pub const VT_SUB_ROOT2: flatbuffers::VOffsetT = 10;
    pub const VT_FIELD3: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn field1(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RootProto::VT_FIELD1, None)
  }
  #[inline]
  pub fn field2(&self) -> Option<&'a [i8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(RootProto::VT_FIELD2, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn sub_root1(&self) -> Option<SubRootProto1<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<SubRootProto1>>(RootProto::VT_SUB_ROOT1, None)
  }
  #[inline]
  pub fn sub_root2(&self) -> Option<SubRootProto2<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<SubRootProto2>>(RootProto::VT_SUB_ROOT2, None)
  }
  #[inline]
  pub fn field3(&self) -> i32 {
    self._tab.get::<i32>(RootProto::VT_FIELD3, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for RootProto<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"field1", Self::VT_FIELD1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>(&"field2", Self::VT_FIELD2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SubRootProto1>>(&"sub_root1", Self::VT_SUB_ROOT1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<SubRootProto2>>(&"sub_root2", Self::VT_SUB_ROOT2, false)?
     .visit_field::<i32>(&"field3", Self::VT_FIELD3, false)?
     .finish();
    Ok(())
  }
}
pub struct RootProtoArgs<'a> {
    pub field1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub field2: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
    pub sub_root1: Option<flatbuffers::WIPOffset<SubRootProto1<'a>>>,
    pub sub_root2: Option<flatbuffers::WIPOffset<SubRootProto2<'a>>>,
    pub field3: i32,
}
impl<'a> Default for RootProtoArgs<'a> {
    #[inline]
    fn default() -> Self {
        RootProtoArgs {
            field1: None,
            field2: None,
            sub_root1: None,
            sub_root2: None,
            field3: 0,
        }
    }
}
pub struct RootProtoBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> RootProtoBuilder<'a, 'b> {
  #[inline]
  pub fn add_field1(&mut self, field1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RootProto::VT_FIELD1, field1);
  }
  #[inline]
  pub fn add_field2(&mut self, field2: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RootProto::VT_FIELD2, field2);
  }
  #[inline]
  pub fn add_sub_root1(&mut self, sub_root1: flatbuffers::WIPOffset<SubRootProto1<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SubRootProto1>>(RootProto::VT_SUB_ROOT1, sub_root1);
  }
  #[inline]
  pub fn add_sub_root2(&mut self, sub_root2: flatbuffers::WIPOffset<SubRootProto2<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SubRootProto2>>(RootProto::VT_SUB_ROOT2, sub_root2);
  }
  #[inline]
  pub fn add_field3(&mut self, field3: i32) {
    self.fbb_.push_slot::<i32>(RootProto::VT_FIELD3, field3, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RootProtoBuilder<'a, 'b> {
    let start = _fbb.start_table();
    RootProtoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RootProto<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for RootProto<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("RootProto");
      ds.field("field1", &self.field1());
      ds.field("field2", &self.field2());
      ds.field("sub_root1", &self.sub_root1());
      ds.field("sub_root2", &self.sub_root2());
      ds.field("field3", &self.field3());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_root_proto<'a>(buf: &'a [u8]) -> RootProto<'a> {
  unsafe { flatbuffers::root_unchecked::<RootProto<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_root_proto<'a>(buf: &'a [u8]) -> RootProto<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<RootProto<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `RootProto`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_root_proto_unchecked`.
pub fn root_as_root_proto(buf: &[u8]) -> Result<RootProto, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RootProto>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RootProto` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_root_proto_unchecked`.
pub fn size_prefixed_root_as_root_proto(buf: &[u8]) -> Result<RootProto, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RootProto>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RootProto` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_root_proto_unchecked`.
pub fn root_as_root_proto_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RootProto<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RootProto<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RootProto` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_root_proto_unchecked`.
pub fn size_prefixed_root_as_root_proto_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RootProto<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RootProto<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RootProto and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RootProto`.
pub unsafe fn root_as_root_proto_unchecked(buf: &[u8]) -> RootProto {
  flatbuffers::root_unchecked::<RootProto>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RootProto and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RootProto`.
pub unsafe fn size_prefixed_root_as_root_proto_unchecked(buf: &[u8]) -> RootProto {
  flatbuffers::size_prefixed_root_unchecked::<RootProto>(buf)
}
#[inline]
pub fn finish_root_proto_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<RootProto<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_root_proto_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<RootProto<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
